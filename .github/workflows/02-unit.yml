name: Unit

on:
  push:
    branches:
      - trunk
  pull_request:

jobs:
  php:
    name: "PHPUnit with PHP ${{ matrix.php-version }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.2","8.3"]
    env:
      TEST_SUITES: 'administration framework profiling migration system unit integration migration-tests'
      APP_ENV: test
      DATABASE_URL: mysql://root:root@127.0.0.1:3306/root
      APP_URL: http://localhost:8000
      APP_SECRET: devsecret
      OPENSEARCH_URL: 127.0.0.1:9200
      BLUE_GREEN_DEPLOYMENT: 1
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'

    services:
      database:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: root
        options: '--mount="type=tmpfs,destination=/var/lib/mysql" --health-cmd="mysqladmin ping -h 127.0.0.1" --health-interval=5s --health-timeout=2s --health-retries=3'
        ports:
          - "3306:3306"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none

      - name: Configure for PHP 8.3
        run: |
          composer config platform.php 8.2.99
          composer config -d vendor-bin/cs-fixer platform.php 8.2.99
          composer config -d vendor-bin/rector platform.php 8.2.99
          composer config -d vendor-bin/roave-backward-compatibility-check platform.php 8.2.99
        if: matrix.php-version == '8.3'

      - name: Setup Composer
        run: |
          composer install

      - name: Run PHPUnit
        run: |
          for TEST_SUITE in $TEST_SUITES; do php -d memory_limit=-1 vendor/bin/phpunit --configuration phpunit.xml.dist --exclude-group "needsWebserver,quarantined" --testsuite "$TEST_SUITE"; done

  admin:
    runs-on: ubuntu-latest
    name: "Jest Admin"
    env:
      APP_ENV: prod
      DATABASE_URL: mysql://root:root@database:3306/root
      APP_URL: http://localhost:8000
      APP_SECRET: devsecret
      BLUE_GREEN_DEPLOYMENT: 1

    steps:
      - name: Clone platform
        uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Retrieve the cached "node_modules" directory (if present)
        uses: actions/cache@v2
        id: node-cache
        with:
          path: src/Administration/Resources/app/administration/node_modules
          key: admin-node-modules-${{ runner.os }}-${{ hashFiles('src/Administration/Resources/app/administration/package-lock.json') }}

      - name: Install dependencies (if the cached directory was not found)
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm --prefix src/Administration/Resources/app/administration ci --no-audit --prefer-offline

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Setup Composer
        run: composer install

      - name: Generate Schema
        run: bin/console framework:schema -s 'entity-schema' src/Administration/Resources/app/administration/test/_mocks_/entity-schema.json

#      - name: Run Jest Admin
#        run: npm --prefix src/Administration/Resources/app/administration run unit -- --silent
